services:
  # 백엔드 API 서버
  backend:
    build: .
    container_name: character-chat-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - ENABLE_TRACING=true
      - OTEL_SERVICE_NAME=character-chat-backend
      - OTEL_SERVICE_VERSION=1.0.0
      - JAEGER_ENDPOINT=http://jaeger:4318/v1/traces
      - DATABASE_URL=${DATABASE_URL}
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/google-credentials/service-account.json
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
    volumes:
      - ./uploads:/app/uploads
      - ./google-credentials:/app/google-credentials:ro
    networks:
      - app-network
    depends_on:
      - db
      - redis
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=3001"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolalloworigin=*"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,PATCH,OPTIONS"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.routers.backend.middlewares=backend-cors"

  # PostgreSQL 데이터베이스
  db:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./add-user.sql:/docker-entrypoint-initdb.d/add-user.sql
    networks:
      - app-network
    restart: unless-stopped

  # Redis (캐싱 및 세션 스토리지)
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
