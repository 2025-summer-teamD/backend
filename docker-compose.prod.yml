services:
  traefik:
    image: traefik:v3.0
    container_name: "traefik"
    # --- 핵심 설정 부분 ---
    env_file:
    - .env  
    command:
      # Docker를 서비스 제공자(Provider)로 사용하겠다고 선언
      - --providers.docker=true
      # 보안을 위해 기본적으로 생성되는 라우터를 비활성화
      - --providers.docker.exposedbydefault=false
      # 웹 대시보드를 활성화하고, 8080 포트로 접근하게 함
      - --api.insecure=true
      - --api.dashboard=true
      # HTTP(80)와 HTTPS(443) 요청을 받을 진입점(EntryPoints) 설정
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # (선택) HTTP 요청을 HTTPS로 리디렉션
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      # (HTTPS용) Let's Encrypt 설정
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      # 호스트의 80 포트를 컨테이너의 80 포트로 매핑 (HTTP)
      - "80:80"
      # 호스트의 443 포트를 컨테이너의 443 포트로 매핑 (HTTPS)
      - "443:443"
      # 호스트의 8080 포트를 컨테이너의 8080 포트로 매핑 (Traefik 대시보드)
      - "8080:8080"
    volumes:
      # Docker 소켓을 마운트하여 Traefik이 다른 컨테이너의 이벤트를 감지하게 함
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Let's Encrypt 인증서를 저장할 볼륨 (서버 재시작 시에도 유지)
      - "./letsencrypt:/letsencrypt"
    networks:
      - app-network
    restart: unless-stopped

  app:
    build: .
    image: ${DOCKER_HUB_USERNAME}/your-repo-name:main
    container_name: express_app
    ports:
      - 3001:3001
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379
    depends_on:
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network
    labels:
      # 이 서비스에 대한 라우팅을 활성화
      - traefik.enable=true
      # --- HTTP 라우터 설정 ---
      # 'api-router'라는 이름의 HTTP 라우터 생성
      - traefik.http.routers.api-router.rule=Host(`api.${DOMAIN}`)
      # 이 라우터는 'web' 진입점(HTTP/80)을 사용
      - traefik.http.routers.api-router.entrypoints=web
      # --- HTTPS 라우터 설정 ---
      # 'api-router-secure'라는 이름의 HTTPS 라우터 생성
      - traefik.http.routers.api-router-secure.rule=Host(`api.${DOMAIN}`)
      # 이 라우터는 'websecure' 진입점(HTTPS/443)을 사용
      - traefik.http.routers.api-router-secure.entrypoints=websecure
      # TLS(SSL) 활성화 및 Let's Encrypt 해석기 지정
      - traefik.http.routers.api-router-secure.tls=true
      - traefik.http.routers.api-router-secure.tls.certresolver=myresolver
      # --- 서비스 연결 설정 ---
      # 이 라우터가 어떤 서비스로 요청을 보낼지 지정
      - traefik.http.services.api-service.loadbalancer.server.port=3001
      # (Express 앱이 컨테이너 내부에서 3001 포트로 실행된다고 가정)
    command: npm run start # 여기서 prisma migrate 제거

  redis:
    image: redis:7
    container_name: redis_server
    ports:
      - 6379:6379
    restart: unless-stopped
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
