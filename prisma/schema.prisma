// Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChatLogType {
  text
  image
  video
}

enum ChatLogSpeaker {
  user
  ai
}

model ChatRoom {
  id           Int                   @id @default(autoincrement())
  name         String?
  description  String?
  clerkId      String?              @map("clerk_id")
  personaId    Int?                 @map("persona_id")
  likes        Boolean?              @default(false)
  isPublic     Boolean               @default(true) @map("is_public")
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime?             @map("updated_at")
  isDeleted    Boolean               @default(false) @map("is_deleted")
  participants ChatRoomParticipant[]
  ChatLogs     ChatLog[]
}

model ChatRoomParticipant {
  id         Int      @id @default(autoincrement())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int      @map("chatroom_id")
  user       User?    @relation(fields: [userId], references: [clerkId])
  userId     String?  @map("user_id")
  persona    Persona? @relation(fields: [personaId], references: [id])
  personaId  Int?     @map("persona_id")
  joinedAt   DateTime @default(now()) @map("joined_at")
}

model User {
  clerkId   String    @id @map("clerk_id")
  name      String?   @db.VarChar(100)
  email     String?   @db.VarChar(255)
  firstName String?   @map("first_name") @db.VarChar(100)
  lastName  String?   @map("last_name") @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  isDeleted Boolean   @default(false) @map("is_deleted")
  personas  Persona[]
  chatRooms ChatRoomParticipant[]
  @@map("users")
}

model Persona {
  id                   Int       @id @default(autoincrement())
  clerkId              String    @map("clerk_id")
  user                 User      @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  creatorName          String?   @map("creator_name") @db.VarChar(100)
  name                 String    @db.VarChar(100)
  imageUrl             String    @map("image_url") @db.VarChar(1024)
  isPublic             Boolean   @default(true) @map("is_public")
  introduction         String?
  prompt               Json
  usesCount            Int       @default(0) @map("uses_count")
  likesCount           Int       @default(0) @map("likes_count")
  exp                  Int       @default(0)
  friendship           Int       @default(1)
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime? @map("updated_at")
  isDeleted            Boolean   @default(false) @map("is_deleted")
  chatRooms            ChatRoomParticipant[]
  @@index([clerkId])
}

model ChatLog {
  id         Int         @id @default(autoincrement())
  chatroomId Int         @map("chatroom_id")
  chatRoom   ChatRoom    @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  senderType String      @map("sender_type") // 'user' | 'ai'
  senderId   String      @map("sender_id") // clerkId(유저) or personaId(문자열 변환)
  text       String
  type       ChatLogType
  time       DateTime    @default(now())
  isDeleted  Boolean     @default(false) @map("is_deleted")
  @@index([chatroomId])
}