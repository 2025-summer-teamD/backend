// Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChatLogType {
  text
  image
  video
}

enum ChatLogSpeaker {
  user
  ai
}

model User {
  clerkId   String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime?
  isDeleted Boolean  @default(false)
  personas   Persona[]
  chatRooms  ChatRoom[]

  @@map("users")
}

model Persona {
  id           Int      @id @default(autoincrement())
  clerkId     String
  user         User     @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
  name         String   @db.VarChar(100)
  imageUrl    String   @db.VarChar(1024)
  isPublic    Boolean  @default(true)
  introduction String?
  prompt       Json
  usesCount   Int      @default(0)
  likesCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime?
  isDeleted   Boolean  @default(false)
  chatRooms    ChatRoom[]

  @@index([clerkId])
}

model ChatRoom {
  id           Int      @id @default(autoincrement()) @unique
  clerkId     String
  user         User     @relation(fields: [clerkId], references: [clerkId])
  characterId Int
  persona      Persona  @relation(fields: [characterId], references: [id])
  friendship   Int      @default(1)
  exp          Int      @default(0)
  likes        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime?
  isDeleted   Boolean  @default(false)
  ChatLogs     ChatLog[]
}

model ChatLog {
  id          Int           @id @default(autoincrement())
  chatroomId Int
  chatRoom    ChatRoom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  text        String
  type        ChatLogType
  speaker     ChatLogSpeaker
  time        DateTime @default(now())
  isDeleted  Boolean  @default(false)

  @@index([chatroomId])
}
