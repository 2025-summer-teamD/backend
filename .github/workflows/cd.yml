on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # GCP 인증
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # gcloud CLI 설치
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # GOOGLE_APPLICATION_CREDENTIALS 환경 변수 설정
      - name: Set Google Application Credentials
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=${{ steps.auth.outputs.credentials_file_path }}" >> $GITHUB_ENV

      # SSH 키 설정
      - name: Setup SSH key
        run: |
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" | base64 --decode > ./gcp_ssh_key
          chmod 600 ./gcp_ssh_key

      # ⭐️ 수정된 파일 복사 단계 ⭐️
      - name: Copy files to GCP VM
        run: |
          scp -i ./gcp_ssh_key -o StrictHostKeyChecking=no -r \
            Dockerfile \
            docker-compose.prod.yml \
            docker-compose.monitoring.yml \
            docker.sh \
            deploy.sh \
            prometheus/ \
            grafana/ \
            traefik/ \
            logstash/ \
            ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_INSTANCE_IP }}:~/

      # SSH를 통한 배포 명령 실행
      - name: Deploy via SSH
        run: |
          ssh -i ./gcp_ssh_key -o StrictHostKeyChecking=no ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_INSTANCE_IP }} bash -c "'
            # ... (기존 Docker 설치 및 실행 스크립트) ...
            
            echo Pulling latest images...
            sudo docker compose -f docker-compose.prod.yml pull && sudo docker compose -f docker-compose.monitoring.yml pull

            echo Starting containers...
            sudo docker compose -f docker-compose.prod.yml up -d && sudo docker compose -f docker-compose.monitoring.yml up -d

            echo Cleaning unused Docker resources...
            sudo docker system prune -af
          '"